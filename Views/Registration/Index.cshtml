@model List<Registracija.Dtos.RegistrationDto>

<form id="registrationFormId" asp-action="SaveChanges" method="post">
    <table class="table">
        <thead>
            <tr>
                <th>Registracijos požymiai</th>
                <th>Reikšmė</th>
            </tr>
        </thead>
        <tbody>

            @for (int i = 0; i < Model.Count; i++)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => Model[i].QuestionValue)
                        @Html.HiddenFor(modelItem => Model[i].QuestionId)
                    </td>
                    <td>
                        @Html.DropDownListFor(modelItem => Model[i].AnswerId, new SelectList(Model[i].Answers, "Id", "Value"),
                            new { @class = "form-control dropdown", @id = "dropdown", @disabled = "disabled" })
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="form-group">
        <input type="button" value="Koreguoti požymius" class="btn btn-primary" id="Button1" />
        <input type="submit" value="Saugoti pataisymus" class="btn btn-primary" id="Button2" disabled />
        <input type="reset" value="Atšaukti pataisymus" class="btn btn-primary" id="Button3" disabled onclick="this.blur();" />
    </div>

</form>

@section Scripts{
    <script>

        var button1 = document.getElementById("Button1");
        var button2 = document.getElementById("Button2");
        var button3 = document.getElementById("Button3");
        var dropdownElements = Array.from(document.getElementsByClassName("dropdown"));

        button1.addEventListener("click", function () {
            button1.toggleAttribute("disabled");
            button2.toggleAttribute("disabled");
            button3.toggleAttribute("disabled");
            dropdownElements.forEach((element) => {
                element.toggleAttribute("disabled");
            });
        });


        // this is the id of the form
        $("#registrationFormId").submit(function (e) {

            e.preventDefault();
            // avoid to execute the actual submit of the form. (if commented out, will trigger html's submit form instead of hiting jquery)

            const form = $(this);
            // 'this' represents a form (we accessed form's element through '$("#registrationFormId")' so this is a form's data)
            const baseUrl = form.attr('action');
            // html form attribute stores action which is called when we submit a form. In our example baseURL consits of 'Registration' and action 'SaveChanges'. Output is 'Registration/SaveChanges'. We can also remove this line and construct url by hand
            const regId = new URL(document.URL).searchParams.get("regId");
            // from DOM (document object model) we extract path variable
            const url = baseUrl + '?regId=' + regId;
            // as our controller requires '[FromQuery] int regId' we need to build URL with path variable

            $.ajax({
                type: "POST", // same as in form. By adding type, we no longer need inside <form> attribute 'method="post"'
                url: url,
                data: form.serialize(), // serializes the form's elements.
                success: function (data) {
                    console.log(data); // show response.

                    button1.toggleAttribute("disabled");
                    button2.toggleAttribute("disabled");
                    button3.toggleAttribute("disabled");
                    dropdownElements.forEach((element) => {
                        element.toggleAttribute("disabled");
                    });
                }
            });
        });

    </script>

}

